make[1]: Entering directory `/home/cainus/percolator'
current_path:  DOES_NOT_EXIST mount_path:  browser
{
  "instrumentation": "node-jscoverage",
  "sloc": 567,
  "hits": 523,
  "misses": 44,
  "coverage": 92.23985890652557,
  "files": [
    {
      "filename": "CRUDCollection.js",
      "coverage": 94.20289855072464,
      "hits": 65,
      "misses": 4,
      "sloc": 69,
      "source": {
        "1": {
          "source": "var JSV = require('JSV').JSV;",
          "coverage": 1
        },
        "2": {
          "source": "var _ = require('underscore');",
          "coverage": 1
        },
        "3": {
          "source": "",
          "coverage": ""
        },
        "4": {
          "source": "var CRUDCollection = function(options){",
          "coverage": 1
        },
        "5": {
          "source": "",
          "coverage": ""
        },
        "6": {
          "source": "  if (!options || (!options.list &amp;&amp; !options.collectionGET)){",
          "coverage": 24
        },
        "7": {
          "source": "    throw \"the options parameter should have a list() or collectionGET() function.\";",
          "coverage": 1
        },
        "8": {
          "source": "  }",
          "coverage": ""
        },
        "9": {
          "source": "",
          "coverage": ""
        },
        "10": {
          "source": "  // TODO: list() array or object",
          "coverage": ""
        },
        "11": {
          "source": "  if (options.create &amp;&amp; !options.createSchema &amp;&amp; !!options.schema){",
          "coverage": 23
        },
        "12": {
          "source": "    options.createSchema = options.schema;",
          "coverage": 2
        },
        "13": {
          "source": "  }",
          "coverage": ""
        },
        "14": {
          "source": "  if (!options.updateSchema &amp;&amp; !!options.schema){",
          "coverage": 23
        },
        "15": {
          "source": "    options.updateSchema = options.schema;",
          "coverage": 4
        },
        "16": {
          "source": "  }",
          "coverage": ""
        },
        "17": {
          "source": "  if (!options.update &amp;&amp; !options.upsert){",
          "coverage": 23
        },
        "18": {
          "source": "    delete options.updateSchema; // if there's no update(), we ignore any updateSchema",
          "coverage": 18
        },
        "19": {
          "source": "  }",
          "coverage": ""
        },
        "20": {
          "source": "",
          "coverage": ""
        },
        "21": {
          "source": "  var outputList = function(req, res, list, key){",
          "coverage": 23
        },
        "22": {
          "source": "    var collection = res.collection(list, key);",
          "coverage": 3
        },
        "23": {
          "source": "    if (req.app.autoLink){",
          "coverage": 3
        },
        "24": {
          "source": "      collection = collection.linkEach('self', function(item, name){",
          "coverage": 3
        },
        "25": {
          "source": "        if (!!key){",
          "coverage": 0
        },
        "26": {
          "source": "          return req.uri.child(item[key]);  // allow 'options' to provide another key to link on.",
          "coverage": 0
        },
        "27": {
          "source": "        } else {",
          "coverage": ""
        },
        "28": {
          "source": "          return req.uri.child(name);",
          "coverage": 0
        },
        "29": {
          "source": "        }",
          "coverage": ""
        },
        "30": {
          "source": "      });",
          "coverage": ""
        },
        "31": {
          "source": "    }",
          "coverage": ""
        },
        "32": {
          "source": "    if (!!options.createSchema &amp;&amp; req.app.autoLink){",
          "coverage": 3
        },
        "33": {
          "source": "      collection = collection.link('create',",
          "coverage": 2
        },
        "34": {
          "source": "                                   req.uri.query(false),",
          "coverage": ""
        },
        "35": {
          "source": "                                   { method : 'POST',",
          "coverage": ""
        },
        "36": {
          "source": "                                     schema : options.createSchema});",
          "coverage": ""
        },
        "37": {
          "source": "    }",
          "coverage": ""
        },
        "38": {
          "source": "    collection.send();",
          "coverage": 3
        },
        "39": {
          "source": "  };",
          "coverage": ""
        },
        "40": {
          "source": "",
          "coverage": ""
        },
        "41": {
          "source": "  this.handler = {",
          "coverage": 23
        },
        "42": {
          "source": "    GET : function(req, res){",
          "coverage": ""
        },
        "43": {
          "source": "      options.list(req, res, function(err, items, options){",
          "coverage": 3
        },
        "44": {
          "source": "        if (!!err){",
          "coverage": 3
        },
        "45": {
          "source": "          return res.status.internalServerError(err);",
          "coverage": 0
        },
        "46": {
          "source": "        }",
          "coverage": ""
        },
        "47": {
          "source": "        outputList(req, res, items, options);",
          "coverage": 3
        },
        "48": {
          "source": "      });",
          "coverage": ""
        },
        "49": {
          "source": "    }",
          "coverage": ""
        },
        "50": {
          "source": "  };",
          "coverage": ""
        },
        "51": {
          "source": "",
          "coverage": ""
        },
        "52": {
          "source": "  if (!!options.create){",
          "coverage": 23
        },
        "53": {
          "source": "    this.handler.POST = function(req, res){",
          "coverage": 4
        },
        "54": {
          "source": "      req.onJson(options.createSchema, function(err, obj){",
          "coverage": 2
        },
        "55": {
          "source": "        options.create(req, res, obj, function(){",
          "coverage": 2
        },
        "56": {
          "source": "          return res.status.created(req.uri);",
          "coverage": 1
        },
        "57": {
          "source": "        });",
          "coverage": ""
        },
        "58": {
          "source": "      });",
          "coverage": ""
        },
        "59": {
          "source": "    };",
          "coverage": ""
        },
        "60": {
          "source": "  }",
          "coverage": ""
        },
        "61": {
          "source": "",
          "coverage": ""
        },
        "62": {
          "source": "  this.wildcard = { };",
          "coverage": 23
        },
        "63": {
          "source": "",
          "coverage": ""
        },
        "64": {
          "source": "  if (!!options.fetch){",
          "coverage": 23
        },
        "65": {
          "source": "    this.wildcard.fetch = options.fetch;",
          "coverage": 6
        },
        "66": {
          "source": "    this.wildcard.GET = function(req, res){",
          "coverage": 6
        },
        "67": {
          "source": "      var resource = res.object(req.fetched);",
          "coverage": 5
        },
        "68": {
          "source": "      if ((!!options.update || !!options.upsert) &amp;&amp; (req.app.autoLink)){",
          "coverage": 5
        },
        "69": {
          "source": "        resource.link( \"update\", req.uri, {method : 'PUT', schema : options.updateSchema});",
          "coverage": 1
        },
        "70": {
          "source": "      }",
          "coverage": ""
        },
        "71": {
          "source": "      if (!!options.destroy &amp;&amp; req.app.autoLink){",
          "coverage": 5
        },
        "72": {
          "source": "        resource.link( \"delete\", req.uri, {method : 'DELETE'});",
          "coverage": 1
        },
        "73": {
          "source": "      }",
          "coverage": ""
        },
        "74": {
          "source": "      resource.send();",
          "coverage": 5
        },
        "75": {
          "source": "    };",
          "coverage": ""
        },
        "76": {
          "source": "  }",
          "coverage": ""
        },
        "77": {
          "source": "",
          "coverage": ""
        },
        "78": {
          "source": "  // UPDATE",
          "coverage": ""
        },
        "79": {
          "source": "  if (!!options.update){",
          "coverage": 23
        },
        "80": {
          "source": "    this.wildcard.fetchOnPUT = true;",
          "coverage": 3
        },
        "81": {
          "source": "    this.wildcard.PUT = function(req, res){",
          "coverage": 3
        },
        "82": {
          "source": "      req.onJson(options.updateSchema, function(err, obj){",
          "coverage": 2
        },
        "83": {
          "source": "        var id = req.uri.child();",
          "coverage": 2
        },
        "84": {
          "source": "        options.update(req, res, id, obj, function(){",
          "coverage": 2
        },
        "85": {
          "source": "          res.setHeader('Location', req.uri);",
          "coverage": 1
        },
        "86": {
          "source": "          res.writeHead(303);",
          "coverage": 1
        },
        "87": {
          "source": "          return res.end();",
          "coverage": 1
        },
        "88": {
          "source": "        });",
          "coverage": ""
        },
        "89": {
          "source": "      });",
          "coverage": ""
        },
        "90": {
          "source": "    };",
          "coverage": ""
        },
        "91": {
          "source": "  }",
          "coverage": ""
        },
        "92": {
          "source": "",
          "coverage": ""
        },
        "93": {
          "source": "  // UPSERT",
          "coverage": ""
        },
        "94": {
          "source": "  if (!!options.upsert){",
          "coverage": 23
        },
        "95": {
          "source": "    // fetch is not used here, because this is for create as well as update",
          "coverage": ""
        },
        "96": {
          "source": "    this.wildcard.fetchOnPUT = false;",
          "coverage": 2
        },
        "97": {
          "source": "",
          "coverage": ""
        },
        "98": {
          "source": "    this.wildcard.PUT = function(req, res){",
          "coverage": 2
        },
        "99": {
          "source": "      req.onJson(options.updateSchema, function(err, obj){",
          "coverage": 2
        },
        "100": {
          "source": "        var id = req.uri.child();",
          "coverage": 2
        },
        "101": {
          "source": "        options.upsert(req, res, id, obj, function(){",
          "coverage": 2
        },
        "102": {
          "source": "          res.setHeader('Location', req.uri);",
          "coverage": 1
        },
        "103": {
          "source": "          res.writeHead(303);",
          "coverage": 1
        },
        "104": {
          "source": "          return res.end();",
          "coverage": 1
        },
        "105": {
          "source": "        });",
          "coverage": ""
        },
        "106": {
          "source": "      });",
          "coverage": ""
        },
        "107": {
          "source": "    };",
          "coverage": ""
        },
        "108": {
          "source": "  }",
          "coverage": ""
        },
        "109": {
          "source": "",
          "coverage": ""
        },
        "110": {
          "source": "  // DESTROY",
          "coverage": ""
        },
        "111": {
          "source": "  if (!!options.destroy){",
          "coverage": 23
        },
        "112": {
          "source": "    this.wildcard.DELETE = function(req, res){",
          "coverage": 3
        },
        "113": {
          "source": "      options.destroy(req, res, req.uri.child(), function(){",
          "coverage": 2
        },
        "114": {
          "source": "        res.writeHead(204);",
          "coverage": 1
        },
        "115": {
          "source": "        res.end();",
          "coverage": 1
        },
        "116": {
          "source": "      });",
          "coverage": ""
        },
        "117": {
          "source": "    };",
          "coverage": ""
        },
        "118": {
          "source": "  }",
          "coverage": ""
        },
        "119": {
          "source": "",
          "coverage": ""
        },
        "120": {
          "source": "  if (!!options.collectionGET){",
          "coverage": 23
        },
        "121": {
          "source": "    this.handler.GET = options.collectionGET;",
          "coverage": 1
        },
        "122": {
          "source": "  }",
          "coverage": ""
        },
        "123": {
          "source": "",
          "coverage": ""
        },
        "124": {
          "source": "  if (!!options.memberGET){",
          "coverage": 23
        },
        "125": {
          "source": "    this.wildcard.GET = options.memberGET;",
          "coverage": 1
        },
        "126": {
          "source": "  }",
          "coverage": ""
        },
        "127": {
          "source": "",
          "coverage": ""
        },
        "128": {
          "source": "};",
          "coverage": ""
        },
        "129": {
          "source": "module.exports = CRUDCollection;",
          "coverage": 1
        }
      }
    },
    {
      "filename": "ContextFaker.js",
      "coverage": 86.27450980392157,
      "hits": 88,
      "misses": 14,
      "sloc": 102,
      "source": {
        "1": {
          "source": "var assert = require('assert');",
          "coverage": 1
        },
        "2": {
          "source": "var nodeUrl = require('url');",
          "coverage": 1
        },
        "3": {
          "source": "var urlgrey = require('urlgrey');",
          "coverage": 1
        },
        "4": {
          "source": "var StatusManager = require('../index').StatusManager;",
          "coverage": 1
        },
        "5": {
          "source": "var ObjectHelper = require('../index').ObjectHelper;",
          "coverage": 1
        },
        "6": {
          "source": "var FetchHelper = require('../index').FetchHelper;",
          "coverage": 1
        },
        "7": {
          "source": "var _ = require('underscore');",
          "coverage": 1
        },
        "8": {
          "source": "var detour = require('detour');",
          "coverage": 1
        },
        "9": {
          "source": "",
          "coverage": ""
        },
        "10": {
          "source": "var ContextFaker = function(method, url, headers, body){",
          "coverage": 1
        },
        "11": {
          "source": "  this._method = method || 'GET';",
          "coverage": 9
        },
        "12": {
          "source": "  this._url = url || '/';",
          "coverage": 9
        },
        "13": {
          "source": "  this._headers = headers || {};",
          "coverage": 9
        },
        "14": {
          "source": "  this._body = body || '';",
          "coverage": 9
        },
        "15": {
          "source": "  this.expect = this._expectObject();",
          "coverage": 9
        },
        "16": {
          "source": "  this.expectations = {};",
          "coverage": 9
        },
        "17": {
          "source": "  this._refreshFake();",
          "coverage": 9
        },
        "18": {
          "source": "  this.$ = {};",
          "coverage": 9
        },
        "19": {
          "source": "};",
          "coverage": ""
        },
        "20": {
          "source": "",
          "coverage": ""
        },
        "21": {
          "source": "ContextFaker.prototype._refreshFake = function(){",
          "coverage": 1
        },
        "22": {
          "source": "  this.$ = new ContextFake(this._method,",
          "coverage": 21
        },
        "23": {
          "source": "                              this._url,",
          "coverage": ""
        },
        "24": {
          "source": "                              this._headers,",
          "coverage": ""
        },
        "25": {
          "source": "                              this._body,",
          "coverage": ""
        },
        "26": {
          "source": "                              this.expectations,",
          "coverage": ""
        },
        "27": {
          "source": "                              this.done);",
          "coverage": ""
        },
        "28": {
          "source": "  this.req = this.$.req;",
          "coverage": 21
        },
        "29": {
          "source": "  this.res = this.$.res;",
          "coverage": 21
        },
        "30": {
          "source": "};",
          "coverage": ""
        },
        "31": {
          "source": "",
          "coverage": ""
        },
        "32": {
          "source": "ContextFaker.prototype.route = function(module, done){",
          "coverage": 1
        },
        "33": {
          "source": "  var req = this.req;",
          "coverage": 9
        },
        "34": {
          "source": "  var res = this.res;",
          "coverage": 9
        },
        "35": {
          "source": "  var body = this._body;",
          "coverage": 9
        },
        "36": {
          "source": "  this.$.done = done;",
          "coverage": 9
        },
        "37": {
          "source": "  FetchHelper(req, res, module, function(){",
          "coverage": 9
        },
        "38": {
          "source": "    module[req.method](req, res);",
          "coverage": 7
        },
        "39": {
          "source": "    req.end(body);",
          "coverage": 7
        },
        "40": {
          "source": "  });",
          "coverage": ""
        },
        "41": {
          "source": "};",
          "coverage": ""
        },
        "42": {
          "source": "",
          "coverage": ""
        },
        "43": {
          "source": "ContextFaker.prototype.headers = function(headers){",
          "coverage": 1
        },
        "44": {
          "source": "  this._headers = headers;",
          "coverage": 1
        },
        "45": {
          "source": "  this._refreshFake();",
          "coverage": 1
        },
        "46": {
          "source": "  return this;",
          "coverage": 1
        },
        "47": {
          "source": "};",
          "coverage": ""
        },
        "48": {
          "source": "ContextFaker.prototype.header = function(name, value){",
          "coverage": 1
        },
        "49": {
          "source": "  this._headers[name] = value;",
          "coverage": 1
        },
        "50": {
          "source": "  this._refreshFake();",
          "coverage": 1
        },
        "51": {
          "source": "  return this;",
          "coverage": 1
        },
        "52": {
          "source": "};",
          "coverage": ""
        },
        "53": {
          "source": "ContextFaker.prototype.url = function(url){",
          "coverage": 1
        },
        "54": {
          "source": "  this._url = url;",
          "coverage": 9
        },
        "55": {
          "source": "  this._refreshFake();",
          "coverage": 9
        },
        "56": {
          "source": "  return this;",
          "coverage": 9
        },
        "57": {
          "source": "};",
          "coverage": ""
        },
        "58": {
          "source": "ContextFaker.prototype.method = function(method){",
          "coverage": 1
        },
        "59": {
          "source": "  this._method = method;",
          "coverage": 0
        },
        "60": {
          "source": "  this._refreshFake();",
          "coverage": 0
        },
        "61": {
          "source": "  return this;",
          "coverage": 0
        },
        "62": {
          "source": "};",
          "coverage": ""
        },
        "63": {
          "source": "ContextFaker.prototype.body = function(thebody){",
          "coverage": 1
        },
        "64": {
          "source": "  this._body = thebody;",
          "coverage": 1
        },
        "65": {
          "source": "  this._refreshFake();",
          "coverage": 1
        },
        "66": {
          "source": "  return this;",
          "coverage": 1
        },
        "67": {
          "source": "};",
          "coverage": ""
        },
        "68": {
          "source": "",
          "coverage": ""
        },
        "69": {
          "source": "ContextFaker.prototype._expectObject = function(){",
          "coverage": 1
        },
        "70": {
          "source": "  var faker = this;",
          "coverage":