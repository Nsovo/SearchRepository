# tape

tap-producing test harness for node and browsers

[![browser support](https://ci.testling.com/substack/tape.png)](http://ci.testling.com/substack/tape)

[![build status](https://secure.travis-ci.org/substack/tape.png)](http://travis-ci.org/substack/tape)

![tape](http://substack.net/images/tape_drive.png)

# example

``` js
var test = require('tape');

test('timing test', function (t) {
    t.plan(2);
    
    t.equal(typeof Date.now, 'function');
    var start = Date.now();
    
    setTimeout(function () {
        t.equal(Date.now() - start, 100);
    }, 100);
});
```

```
$ node example/timing.js
TAP version 13
# timing test
ok 1 should be equal
not ok 2 should be equal
  ---
    operator: equal
    expected: 100
    actual:   107
  ...

1..2
# tests 2
# pass  1
# fail  1
```

# pretty reporters

The default TAP output is good for machines and humans that are robots.

If you want a more colorful / pretty output there are lots of modules on npm
that will output something pretty if you pipe TAP into them:

 - https://github.com/scottcorgan/tap-spec
 - https://github.com/scottcorgan/tap-dot
 - https://github.com/substack/faucet
 - https://github.com/juliangruber/tap-bail
 - https://github.com/kirbysayshi/tap-browser-color
 - https://github.com/gummesson/tap-json
 - https://github.com/gummesson/tap-min
 - https://github.com/calvinmetcalf/tap-nyan
 - https://www.npmjs.org/package/tap-pessimist
 - https://github.com/toolness/tap-prettify
 - https://github.com/shuhei/colortape
 - https://github.com/aghassemi/tap-xunit

To use them, try `node test/index.js | tap-spec` or pipe it into one
of the modules of your choice!

# uncaught exceptions

By default, uncaught exceptions in your tests will not be intercepted, and will cause tape to crash. If you find this behavior undesirable, use [tape-catch](https://github.com/michaelrhodes/tape-catch) to report any exceptions as TAP errors.

# methods

The assertion methods in tape are heavily influenced or copied from the methods
in [node-tap](https://github.com/isaacs/node-tap).

```
var test = require('tape')
```

## test([name], [opts], cb)

Create a new test with an optional `name` string and optional `opts` object. 
`cb(t)` fires with the new test object `t` once all preceeding tests have
finished. Tests execute serially.

Available `opts` options are:
- opts.skip = true/false. See test.skip.
- opts.timeout = 500. Set a timeout for the test, after which it will fail. 
  See test.timeoutAfter.

If you forget to `t.plan()` out how many assertions you are going to run an