var should = require('should');
var index = require('../index');
var getOptions = index.getOptions;
var getBaseOptions = index.getBaseOptions;

describe("getBaseOptions", function(){
  beforeEach(function(){
    process.env = {PATH: process.env.PATH};
  });
  it ("should set service_job_id if it exists", function(done){
    testServiceJobId(getBaseOptions, done);
  });
  it ("should set git hash if it exists", function(done){
    testGitHash(getBaseOptions, done);
  });
  it ("should set git branch if it exists", function(done){
    testGitBranch(getBaseOptions, done);
  });
  it ("should detect current git hash if not passed in", function(done) {
    testGitHashDetection(getBaseOptions, done);
  });
  it ("should detect current git branch if not passed in", function(done) {
    testGitBranchDetection(getBaseOptions, done);
  });
  it ("should detect detached git head if no hash passed in", function(done) {
    testGitDetachedHeadDetection(getBaseOptions, done);
  });
  it ("should fail local Git detection if no .git directory", function(done) {
    testNoLocalGit(getBaseOptions, done);
  });
  it ("should set repo_token if it exists", function(done){
    testRepoToken(getBaseOptions, done);
  });
  it ("should detect repo_token if not passed in", function(done){
    testRepoTokenDetection(getBaseOptions, done);
  });
  it ("should set service_name if it exists", function(done){
    testServiceName(getBaseOptions, done);
  });
  it ("should set service_name and service_job_id if it's running on travis-ci", function(done){
    testTravisCi(getBaseOptions, done);
  });
  it ("should set service_name and service_job_id if it's running on jenkins", function(done){
    testJenkins(getBaseOptions, done);
  });
  it ("should set service_name and service_job_id if it's running on circleci", function(done){
    testCircleCi(getBaseOptions, done);
  });
  it ("should set service_name and service_job_id if it's running on codeship", function(done){
    testCodeship(getBaseOptions, done);
  });
  it ("should set service_name and service_job_id if it's running on drone", function(done){
    testDrone(getBaseOptions, done);
  });  
});

describe("getOptions", function(){
  beforeEach(function(){
    process.env = {PATH: process.env.PATH};
  });
  it ("should require a callback", function(done) {
    (function() {
      getOptions();
    }).should.throw();
    done();
  });
  it ("should get a filepath if there is one", function(done){
    process.argv[2] = "somepath";
    getOptions(function(err, options){
      options.filepath.should.equal("somepath");
      done();
    });

  });
  it ("should get a filepath if there is one, even in verbose mode", function(done){
    process.argv[2] = "--verbose";
    process.argv[3] = "somepath";
    getOptions(function(err, options){
      options.filepath.should.equal("somepath");
      done();
    });
  });
  it ("should set service_job_id if it exists", function(done){
    testServiceJobId(getOptions, done);
  });
  it ("should set git hash if it exists", function(done){
    testGitHash(getOptions, done);
  });
  it ("should set git branch if it exists", function(done){
    testGitBranch(getOptions, done);
  });
  it ("should detect current git hash if not passed in", function(done) {
    testGitHashDetection(getOptions, done);
  });
  it ("should detect current git branch if not passed in", function(done) {
    testGitBranchDetection(getOptions, done);
  });
  it ("should detect detached git head if no hash passed in", function(done) {
    testGitDetachedHeadDetection(getOptions, done);
  });
  it ("should fail local Git detection if no .git directory", function(done) {
    testNoLocalGit(getOptions, done);
  });
  it ("should set repo_token if it exists", function(done){
    testRepoToken(getOptions, done);
  });
  it ("should detect repo_token if not passed in", function(done){
    testRepoTokenDetection(getOptions, done);
  });
  it ("should set service_name if it exists", function(done){
    testServiceName(getOptions, done);
  });
  it ("should set service_name and service_job_id if it's running on travis-ci", function(done){
    testTravisCi(getOptions, done);
  });
  it ("should set service_name and service_job_id if it's running on jenkins", function(done){
    testJenkins(getOptions, done);
  });
  it ("should set service_name and service_job_id if it's running on circleci", function(done){
    testCircleCi(getOptions, done);
  });
  it ("should set service_name and service_job_id if it's running on codeship", function(done){
    testCodeship(getOptions, done);
  });
  it ("should set service_name and service_job_id if it's running on drone", function(done){
    testDrone(getBaseOptions, done);
  });  
});

var testServiceJobId = function(sut, done){
    process.env.COVERALLS_SERVICE_JOB_ID = "SERVICE_JOB_ID";
    sut(function(err, options){
      options.service_job_id.should.equal("SERVICE_JOB_ID");
      done();
    });
};

var testGitHash = function(sut, done){
  process.env.COVERALLS_GIT_COMMIT = "e3e3e3e3e3e3e3e3e";
  sut(function(err, options){
    options.git.head.id.should.equal("e3e3e3e3e3e3e3e3e");
    done();
  });
};

var testGitDetachedHeadDetection = function(sut, done){
  var localGit = ensureLocalGitContext({ detached: true });
  sut(function(err, options) {
    options.git.head.id.should.equal(localGit.id);
    localGit.wrapUp();
    done();
  });
};

var testGitHashDetection = function(sut, done){
  var localGit = ensureLocalGitContext();
  sut(function(err, options) {
    options.git.head.id.should.equal(localGit.id);
    localGit.wrapUp();
    done();
  });
};

var tes