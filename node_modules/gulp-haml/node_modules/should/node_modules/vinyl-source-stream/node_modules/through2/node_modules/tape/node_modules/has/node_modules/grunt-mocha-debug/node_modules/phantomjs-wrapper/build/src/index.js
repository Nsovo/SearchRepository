(function() {
  var EventEmitter, Page, PhantomJS, fs, http, instances, linestream, main, p, path, phantomBin, phantomjs, shared, spawn,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  path = require('path');

  http = require('http');

  fs = require('fs');

  require('coffee-script');

  spawn = require('child_process').spawn;

  EventEmitter = require('events').EventEmitter;

  linestream = require('line-stream');

  shared = require('./shared');

  p = __dirname;

  while (!fs.existsSync(path.join(p, 'package.json'))) {
    p = path.dirname(p);
  }

  phantomBin = path.join(p, 'node_modules/phantomjs/bin/phantomjs');

  main = path.join(p, 'phantomjs/main.coffee');

  instances = [];

  process.on('exit', function() {
    var instance, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = instances.length; _i < _len; _i++) {
      instance = instances[_i];
      _results.push(instance.close(function() {}));
    }
    return _results;
  });

  PhantomJS = (function(_super) {
    __extends(PhantomJS, _super);

    function PhantomJS(child) {
      this.child = child;
      instances.push(this);
      this.pages = {};
      this.port = null;
      this.closed = false;
    }

    PhantomJS.prototype.createPage = function(cb) {
      var createCb,
        _this = this;
      if (this.closed) {
        throw new Error('phantomjs instance already closed');
      }
      createCb = function(msg) {
        var rv;
        rv = _this.pages[msg.pageId] = new Page(msg.pageId, _this);
        return cb(null, rv);
      };
      return this.send({
        type: 'createPage'
      }, createCb);
    };

    PhantomJS.prototype.send = function(msg, cb) {
      var data, json, opts, req, url,
        _this = this;
      data = JSON.stringify(msg);
      json = '';
      url = "http://" + this.address;
      opts = {
        hostname: '127.0.0.1',
        port: this.port,
        path: '/',
        method: 'POST',
        headers: {
          'Content-Length': data.length,
          'Content-Type': 'application/json'
        }
      };
      req = http.request(opts, function(res) {
        res.setEncoding('utf8');
        res.on('data', function(data) {
          return json += data;
        });
        return res.on('end', function() {
          return cb(JSON.parse(json));
        });
      });
      req.on('error', function(e) {
        if (e.message.match(/ECONNREFUSED|ECONNRESET/)) {
          return;
        }
        throw e;
      });
      return req.end(data, 'utf8');
    };

    PhantomJS.prototype.receive = function(data) {
      var event, msg, page;
      msg = JSON.parse(data);
      if (msg.type === 'phantomTimeout') {
        return this.close(function() {});
      }
      page = this.pages[msg.pageId];
 