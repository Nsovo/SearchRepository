// Generated by CoffeeScript 1.8.0
var isEqualCode, isLikeCode, l, replaceCode, toAST, toCode, _, _B;

_ = (_B = require('uberscore'))._;

l = new _B.Logger('uRequire/codeUtils/replaceCode');

toCode = require("./toCode");

toAST = require("./toAST");

isLikeCode = require("./isLikeCode");

isEqualCode = require("./isEqualCode");

replaceCode = function(AST, matchCode, replCode) {
  var deletion, deletions, replCodeAction, _i, _ref, _ref1, _ref2, _ref3;
  matchCode = (_ref = toAST(matchCode, 'Program')) != null ? (_ref1 = _ref.body) != null ? _ref1[0] : void 0 : void 0;
  replCode = (_ref2 = toAST(replCode, 'Program')) != null ? (_ref3 = _ref2.body) != null ? _ref3[0] : void 0 : void 0;
  deletions = [];
  replCodeAction = function(prop, src) {
    var _ref4, _ref5, _replCode;
    if (_B.isLike(matchCode, src[prop])) {
      _replCode = _.isFunction(replCode) ? (_ref4 = toAST(replCode(src[prop]), 'Program')) != null ? (_ref5 = _ref4.body) != null ? _ref5[0] : void 0 : void 0 : replCode;
      if (_replCode) {
        if (l.deb(50)) {
          l.debug("Replacing code:\n```````````````````\n" + (toCode(src[prop])) + "\n```` with code: ```\n" + (toCode(_replCode)) + "\n```````````````````");
        }
        return src[prop] = _replCode;
      } else {
        if (_.isArray(src)) {
          if (l.deb(50)) {
            l.debug("Deleting code:\n  `" + (toCode(src[prop])) + "`");
          }
          deletions.push({
            src: src,
            prop: prop
          });
        } else {
          if (l.deb(50)) {
            l.debug("Delete code (replacing with EmptyStatement):\n`" + (toCode(src[prop])) + "`");
          }
          src[prop] = {
            type: 'EmptyStatement'
          };
        }
        return false;
      }
    }
  };
  _B.traverse(AST, replCodeAction);
  for (_i = deletions.length - 1; _i >= 0; _i += -1) {
    deletion = deletions[_i];
    deletion.src.splice(deletion.prop, 1);
  }
  return this;
};

module.exports = replaceCode;
