// Generated by CoffeeScript 1.8.0
var Build, BundleFile, DependenciesReporter, FileResource, MasterDefaultsConfig, Module, TextResource, UError, fs, globExpand, isFileInSpecs, l, rimraf, upath, _, _B,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ = (_B = require('uberscore'))._;

l = new _B.Logger('uRequire/process/Build');

fs = require('fs');

rimraf = require('rimraf');

globExpand = require('glob-expand');

upath = require('../paths/upath');

isFileInSpecs = require('../config/isFileInSpecs');

DependenciesReporter = require('./../utils/DependenciesReporter');

MasterDefaultsConfig = require('../config/MasterDefaultsConfig');

UError = require('../utils/UError');

BundleFile = require('./../fileResources/BundleFile');

FileResource = require('./../fileResources/FileResource');

TextResource = require('./../fileResources/TextResource');

Module = require('./../fileResources/Module');

Build = (function(_super) {
  __extends(Build, _super);

  Build.calcProperties = {
    changedModules: function() {
      return _.pick(this._changed, function(f) {
        return f instanceof Module;
      });
    },
    changedResources: function() {
      return _.pick(this._changed, function(f) {
        return f instanceof FileResource;
      });
    },
    errorFiles: function() {
      return _.pick(this._changed, function(f) {
        return f.hasErrors;
      });
    },
    changedFiles: function() {
      return this._changed;
    }
  };

  function Build(buildCfg) {
    Build.__super__.constructor.apply(this, arguments);
    _.extend(this, buildCfg);
    this.count = 0;
    if (this.template.name === 'combined') {
      if (!this.template.combinedFile) {
        this.template.combinedFile = this.dstPath;
        this.dstPath = upath.dirname(this.dstPath);
        l.verbose("`build.template` is 'combined' and `build.template.combinedFile` is undefined:\nSetting `build.template.combinedFile` = '" + this.template.combinedFile + "' from `build.dstPath`\nand `build.dstPath` = '" + this.dstPath + "' (keeping only path.dirname).");
      }
      this.template.combinedFile = upath.changeExt(this.template.combinedFile, '.js');
      this.template._combinedFileTemp = "" + this.template.combinedFile + "___temp";
      if (!this.dstPath) {
        this.dstPath = upath.dirname(this.template.combinedFile);
        l.verbose("`build.template` is 'combined' and `build.dstPath` is undefined:\n Setting `build.dstPath` = '" + this.dstPath + "' from `build.template.combinedFile` = '" + this.template.combinedFile + "'");
      }
      if (this.out) {
        l.warn("`build.out` is deleted due to `combined` template being used - r.js doesn't work in memory yet.");
        delete this.out;
      }
    }
  }

  Build.templates = ['UMD', 'UMDplain', 'AMD', 'nodejs', 'combined'];

  Build.prototype.newBuild = function() {
    this.startDate = new Date();
    this.count++;
    this.current = {};
    this._changed = {};
    return this.cleanProps();
  };

  Build.prototype.addChangedBundleFile = function(filename, bundleFile) {
    return this._changed[filename] = bundleFile;
  };

  Build.prototype.doClean = function() {
    var delFiles, df, err, _i, _len, _results;
    if (this.clean) {
      this.deleteCombinedTemp();
      if (_B.isTrue(this.clean)) {
        if (_B.isTrue((function(_this) {
          return function() {
            var er;
            try {
              return fs.existsSync(_this.dstPath);
            } catch (_error) {
              er = _error;
            }
          };
        })(this)())) {
          if (this.template.name === 'combined') {
            return this.deleteCombined();
          } else {
            l.verbose("clean: deleting whole build.dstPath '" + this.dstPath + "'.");
            try {
              return rimraf.sync(this.dstPath);
            } catch (_error) {
              err = _error;
              return l.warn("Can't delete build.dstPath dir '" + this.dstPath + "'.", err);
            }
          }
        } else {
          return l.verbose("clean: build.dstPath '" + this.dstPath + "' does not exist.");
        }
      } else {
        delFiles = _.filter(globExpand({
          cwd: this.dstPath,
          filter: 'isFile'
        }, '**/*'), (function(_this) {
          return function(f) {
            return isFileInSpecs(f, _this.clean);
          };
        })(this));
        if (!_.isEmpty(delFiles)) {
          l.verbose("clean: deleting " + delFiles.length + " files matched with filespec", this.clean);
          _results = [];
          for (_i = 0, _len = delFiles.length; _i < _len; _i++) {
            df = delFiles[_i];
            l.verbose("clean: deleting file '" + (df = upath.join(this.dstPath, df)) + "'.");
            try {
              _results.push(fs.unlinkSync(df));
            } catch (_error) {
              err = _error;
              _results.push(l.warn("Can't delete file '" + df + "'.", err));
            }
          }
          return _results;
        } else {
          return l.verbose("clean: no files matched filespec", this.clean);
        }
      }
    }
  };

  Build.prototype.deleteCombinedTemp = function() {
    var err;
    if (this.template.name === 'combined') {
      if (_B.isTrue((function(_this) {
        return function() {
          var er;
          try {
            return fs.existsSync(_this.template._combinedFileTemp);
          } catch (_error) {
            er = _error;
          }
        };
      })(this)())) {
        l.debug(30, "Deleting temporary combined directory '" + this.template._combinedFileTemp + "'.");
        try {
          return rimraf.sync(this.template._combinedFileTemp);
        } catch (_error) {
          err = _error;
          return l.warn("Can't delete temp dir '" + this.template._combinedFileTemp + "':", err);
        }
      }
    }
  };

  Build.prototype.deleteCombined = function() {
    var err;
    if (this.template.name === 'combined') {
      if (_B.isTrue((function(_this) {
        return function() {
          var er;
          try {
            return fs.existsSync(_this.template.combinedFile);
          } catch (_error) {
            er = _error;
          }
        };
      })(this)())) {
        l.verbose("Deleting combinedFile '" + this.template.combinedFile + "'.");
        try {
          return fs.unlinkSync(this.template.combinedFile);
        } catch (_error) {
          err = _error;
          return l.warn("Can't delete combinedFile '" + this.template.combinedFile + "':", err);
        }
      }
    }
  };

  Build.prototype.report = function(bundle) {
    var interestingDepTypes, report, _ref, _ref1;
    l.verbose("Report for `build` #" + this.count + ":");
    if (!this.verbose) {
      interestingDepTypes = ['notFoundInBundle', 'untrusted', 'node', 'nodeLocal'];
    }
    if (!_.isEmpty(report = bundle.reporter.getReport(interestingDepTypes))) {
      l.warn("\n \nDependency types report for `build` #" + this.count + ":\n", report);
    }
    l.verbose("Changed: " + (_.size(this.changedResources)) + " resources of which " + (_.size(this.changedModules)) + " were modules.");
    if (((_ref = this._copied) != null ? _ref[0] : void 0) || ((_ref1 = this._copied) != null ? _ref1[1] : void 0)) {
      l.verbose("Copied " + this._copied[0] + " files, Skipped copying " + this._copied[1] + " files.");
    }
    if (_.size(bundle.errorFiles)) {
      l.deb("" + (_.size(bundle.errorFiles)) + " files/resources/modules still with errors totally in the bundle.");
    }
    if (_.size(this.errorFiles)) {
      l.deb("" + (_.size(this.errorFiles)) + " files/resources/modules with errors in this build.");
      return l.er("Build #" + this.count + " finished with errors in " + ((new Date() - this.startDate) / 1000) + "secs.");
    } else {
      return l.verbose("Build #" + this.count + " finished succesfully in " + ((new Date() - this.startDate) / 1000) + "secs.");
    }
  };

  return Build;

})(_B.CalcCachedProperties);

module.exports = Build;

_.extend(module.exports.prototype, {
  l: l,
  _: _,
  _B: _B
});
