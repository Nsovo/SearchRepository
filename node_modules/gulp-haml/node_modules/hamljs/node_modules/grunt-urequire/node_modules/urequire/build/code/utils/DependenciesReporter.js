// Generated by CoffeeScript 1.8.0
var DependenciesReporter, Dependency, l, _, _B,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

_ = (_B = require('uberscore'))._;

l = new _B.Logger('uRequire/utils/DependencyReporter');

Dependency = require('./../fileResources/Dependency');

DependenciesReporter = (function() {
  var dependencyTypesMessages;

  function DependenciesReporter() {
    this.reportData = {};
  }

  dependencyTypesMessages = {
    'untrusted': {
      header: "\u001b[33m Untrusted dependencies (i.e non literal String) found:",
      footer: "They are left AS-IS, BUT are added to the dependency array." + "If evaluated name of the `require( utrustedDep )` isnt in dependency array [..]," + "your app WILL HALT and WILL NOT WORK on the web/AMD side (but should be OK on node).\u001b[0m"
    },
    'node': {
      header: "\u001b[33m Node only dependencies, NOT added to AMD deps array:",
      footer: "Make sure they are not `require`d when running on Web, " + "(i.e separate execution branches when __isNode / __isWeb), " + "otherwise you code will halt on Web."
    },
    'nodeLocal': {
      header: "\u001b[33m Node only *local dependencies*, NOT added to AMD deps array:",
      footer: "Make sure they are not `require`d when running on Web, " + "(i.e separate execution branches when __isNode / __isWeb), " + "otherwise you code will halt on Web."
    },
    'local': {
      header: "\u001b[33m `local` deps (i.e either looking 'local' / declared in deps.locals) not present in bundle :",
      footer: "Note: When executing on plain nodejs, locals are `require`d as is. " + "When executing on Web/AMD or uRequire/UMD they use `rjs.baseUrl`/`rjs.paths`, if present."
    },
    'notFoundInBundle': {
      header: "\u001b[31m Bundle-looking dependencies not found in bundle:",
      footer: "They are added as-is.\u001b[0m"
    },
    'external': {
      header: "External dependencies (not checked in this version):",
      footer: "They are added as-is."
    },
    'webRootMap': {
      header: "Web root dependencies '/' (not checked in this version):",
      footer: "They are added as-is."
    }
  };

  DependenciesReporter.prototype.reportTemplate = function(texts, depsFound) {
    var dep, i, maxDepLength, mod, modules;
    maxDepLength = _.max(_.map(depsFound, function(v, k) {
      return k.length;
    }));
    return '\n   ' + texts.header + '\n' + ((function() {
      var _results;
      _results = [];
      for (dep in depsFound) {
        modules = depsFound[dep];
        _results.push(("    - '" + dep + "'" + (_.pad('(in ' + modules.length + " modules: '", 18 + (maxDepLength - dep.length) + (modules.length + '').length))) + ((function() {
          var _i, _len, _results1;
          _results1 = [];
          for (i = _i = 0, _len = modules.length; _i < _len; i = ++_i) {
            mod = modules[i];
            if (i < 3) {
              _results1.push(mod);
            }
          }
          return _results1;
        })()).join("', '") + (modules.length >= 3 ? "', ...)" : "')"));
      }
      return _results;
    })()).join('\n') + '\n    ' + texts.footer + '\n';
  };

  DependenciesReporter.prototype.addReportData = function(resolvedDeps, modyle) {
    var depType, foundModules, resDep, resDeps, _base, _base1, _i, _len, _ref;
    for (depType in resolvedDeps) {
      resDeps = resolvedDeps[depType];
      if (!(!_.isEmpty(resDeps))) {
        continue;
      }
      (_base = this.reportData)[depType] || (_base[depType] = {});
      _ref = _B.arrayize(resDeps);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        resDep = _ref[_i];
        foundModules = ((_base1 = this.reportData[depType])[resDep] || (_base1[resDep] = []));
        if (__indexOf.call(foundModules, modyle) < 0) {
          foundModules.push(modyle);
        }
      }
    }
    return null;
  };

  DependenciesReporter.prototype.getReport = function(interestingDepTypes) {
    var depType, depTypesMsgs, report;
    if (interestingDepTypes == null) {
      interestingDepTypes = _.keys(dependencyTypesMessages);
    }
    l.debug(95, 'Getting report only for types :', interestingDepTypes);
    report = "";
    for (depType in dependencyTypesMessages) {
      depTypesMsgs = dependencyTypesMessages[depType];
      if (__indexOf.call(interestingDepTypes, depType) >= 0) {
        if (this.reportData[depType]) {
          report += this.reportTemplate(depTypesMsgs, this.reportData[depType]);
        }
      }
    }
    return report;
  };

  return DependenciesReporter;

})();

module.exports = DependenciesReporter;
