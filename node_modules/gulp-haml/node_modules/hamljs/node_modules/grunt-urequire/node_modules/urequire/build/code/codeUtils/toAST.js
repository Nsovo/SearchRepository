// Generated by CoffeeScript 1.8.0
var UError, esprima, toAST, _, _B,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

_ = (_B = require('uberscore'))._;

esprima = require('esprima');

UError = require('../utils/UError');

module.exports = toAST = function(codeOrAST, type) {
  var err, validTypes, _ref;
  validTypes = ['Program', 'BlockStatement'];
  if (type && __indexOf.call(validTypes, type) < 0) {
    throw new UError("Invalid `toAST()` type - validTypes are ['" + (validTypes.join(', ')) + "'].");
  }
  if (_.isString(codeOrAST)) {
    try {
      codeOrAST = esprima.parse(codeOrAST);
    } catch (_error) {
      err = _error;
      throw new UError("*esprima.parse* in toAST while parsing javascript fragment: \n " + codeOrAST + ".", {
        nested: err
      });
    }
  }
  if (_.isArray(codeOrAST)) {
    return {
      type: type || 'Program',
      body: codeOrAST
    };
  } else {
    if (_.isObject(codeOrAST)) {
      if (!type) {
        return codeOrAST;
      } else {
        if (_ref = codeOrAST.type, __indexOf.call(validTypes, _ref) >= 0) {
          codeOrAST.type = type;
          return codeOrAST;
        } else {
          return {
            type: type,
            body: [codeOrAST]
          };
        }
      }
    } else {
      return codeOrAST;
    }
  }
};
