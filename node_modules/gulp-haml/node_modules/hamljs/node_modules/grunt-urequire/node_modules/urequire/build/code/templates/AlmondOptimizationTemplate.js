// Generated by CoffeeScript 1.8.0
var AlmondOptimizationTemplate, Dependency, Template, l, varSelector, _, _B,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ = (_B = require('uberscore'))._;

l = new _B.Logger('uRequire/AlmondOptimizationTemplate');

Dependency = require('../fileResources/Dependency');

Template = require('./Template');

varSelector = function(vars, finale) {
  var v;
  if (finale == null) {
    finale = 'void 0';
  }
  return ((function() {
    var _i, _len, _results;
    _results = [];
    for (_i = 0, _len = vars.length; _i < _len; _i++) {
      v = vars[_i];
      _results.push("(typeof " + v + " !== 'undefined') ? " + v + " : ");
    }
    return _results;
  })()).join(' ') + finale;
};

module.exports = AlmondOptimizationTemplate = (function(_super) {
  __extends(AlmondOptimizationTemplate, _super);

  AlmondOptimizationTemplate.prototype.scope = 'bundle';

  function AlmondOptimizationTemplate(bundle) {
    var aVar, dep, vars, _i, _len, _ref, _ref1, _ref2;
    this.bundle = bundle;
    AlmondOptimizationTemplate.__super__.constructor.apply(this, arguments);

    /* locals & exports.bundle handling. */
    this.localDeps = [];
    this.localParams = [];
    this.localArgs = [];
    this.localDepsVars = {};
    _ref = this.bundle.exportsBundle_depsVars;
    for (dep in _ref) {
      vars = _ref[dep];
      if ((new Dependency(dep, {
        path: '__rootOfBundle__',
        bundle: this.bundle
      })).isLocal) {
        this.localDepsVars[dep] = vars;
      }
    }
    _ref1 = this.bundle.localNonNode_depsVars;
    for (dep in _ref1) {
      vars = _ref1[dep];
      if (!this.localDepsVars[dep]) {
        this.localDepsVars[dep] = vars;
      }
    }
    _ref2 = this.localDepsVars;
    for (dep in _ref2) {
      vars = _ref2[dep];
      for (_i = 0, _len = vars.length; _i < _len; _i++) {
        aVar = vars[_i];
        this.localDeps.push(dep);
        this.localArgs.push(aVar);
        this.localParams.push(varSelector(vars));
      }
    }
    this.exportsBundle_bundle_depsVars = _.pick(this.bundle.exportsBundle_depsVars, (function(_this) {
      return function(vars, dep) {
        return (new Dependency(dep, {
          path: '__rootOfBundle__',
          bundle: _this.bundle
        })).isBundle;
      };
    })(this));
    this.local_nonExportsBundle_depsVars = _.pick(this.bundle.localNonNode_depsVars, (function(_this) {
      return function(vars, dep) {
        return !_this.bundle.exportsBundle_depsVars[dep];
      };
    })(this));
  }

  Object.defineProperties(AlmondOptimizationTemplate.prototype, {
    build: {
      get: function() {
        return this.bundle.build;
      }
    },
    dependenciesExportsBundle_bundle_depsLoader: {
      get: function() {
        var dep, vars;
        return ((function() {
          var _ref, _results;
          _ref = this.exportsBundle_bundle_depsVars;
          _results = [];
          for (dep in _ref) {
            vars = _ref[dep];
            _results.push('    var ' + (vars.length === 1 ? vars[0] : vars.join(', ') + '; ' + vars.join(' = ')) + (" = require('" + dep + "');"));
          }
          return _results;
        }).call(this)).join('\n');
      }
    },
    moduleNamePrint: {
      get: function() {
        var _ref;
        if ((_ref = this.build.template) != null ? _ref.moduleName : void 0) {
          return "'" + this.build.template.moduleName + "', ";
        } else {
          return "";
        }
      }
    },
    bundleFactoryRegistar: {
      get: function() {
        return "if (__isAMD) {\n  return define(" + this.moduleNamePrint + (this.localDeps.length ? "['" + this.localDeps.join("', '") + "'], " : '') + "bundleFactory);\n} else {\n    if (__isNode) {\n        return module.exports = bundleFactory(" + (this.localDeps.length ? "require('" + this.localDeps.join("'), require('") + "')" : '') + ");\n    } else {\n        return bundleFactory(" + (this.localParams.join(', ')) + ");\n    }\n}";
      }
    },
    wrap: {
      get: function() {
        return {
          start: ("(function (global, window){\n  " + (_B.isTrue(this.build.useStrict) ? "'use strict';\n" : '') + (this.sp('runtimeInfo')) + "\n  var __nodeRequire = (__isNode ? require :\n      function(dep){\n        throw new Error(\"uRequire detected missing dependency: '\" + dep + \"' - in a non-nodejs runtime. All it's binding variables were 'undefined'.\")\n      });\n") + this.sp('bundle.mergedPreDefineIIFECode') + this.deb(30, "*** START *** bundleFactory, containing all modules (as AMD) & almond's `require`/`define`") + ("var bundleFactory = function(" + (this.localArgs.join(', ')) + ") {"),
          end: this.sp(['dependenciesExportsBundle_bundle_depsLoader', '`template:combined` loads `dependencies.exports.bundle` with `dep.isBundle` )'], ['bundle.commonCode', 'added after `dependencies.exports.bundle` deps are loaded`'], ['bundle.mergedCode', '`mergedCode` code from all modules is merged and added after `bundle.commonCode`']) + this.deb(30, "require and return `bundle.main` from `bundleFactory()`, kicking off the bundle.") + ("    return require('" + this.bundle.main + "');\n  };") + this.deb(30, "*** END *** bundleFactory: all modules (as AMD), common code & almond's `require`/`define`") + this.sp('bundleFactoryRegistar') + this.deb(20, 'IIFE call of bundle enclosure, with `global === window` always available') + "}).call(this, (typeof exports === 'object' ? global : window),\n              (typeof exports === 'object' ? global : window))"
        };
      }
    },
    paths: {
      get: function() {
        var excludedDep, localDep, _i, _len, _paths, _ref;
        _paths = {};
        _ref = this.localDeps;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          localDep = _ref[_i];
          _paths[localDep] = "getLocal_" + (_.slugify(localDep));
        }
        for (excludedDep in this.bundle.nodeOnly_depsVars) {
          _paths[excludedDep] = "getExcluded_" + (_.slugify(excludedDep));
        }
        return _paths;
      }
    },
    dependencyFiles: {
      get: function() {
        var dep, excludedDep, vars, _dependencyFiles, _ref;
        _dependencyFiles = {};
        l.deb(70, "creating dependencyFiles 'getLocal_XXX' from @localDepsVars = \n", this.localDepsVars);
        _ref = this.localDepsVars;
        for (dep in _ref) {
          vars = _ref[dep];
          l.deb(80, "creating 'getLocal_" + (_.slugify(dep)) + "' by grabDependencyVarOrRequireIt(dep = '", dep, "', aVars = ", vars, ')');
          _dependencyFiles["getLocal_" + (_.slugify(dep))] = this.grabDependencyVarOrRequireIt(dep, vars, 'local');
        }
        l.deb(70, "creating dependencyFiles for @bundle.nodeOnly_depsVars = ", this.bundle.nodeOnly_depsVars);
        for (excludedDep in this.bundle.nodeOnly_depsVars) {
          l.deb(80, "creating 'getExcluded_" + (_.slugify(excludedDep)) + "' by grabDependencyVarOrRequireIt(dep=", excludedDep, ', aVars = always empty array!)');
          _dependencyFiles["getExcluded_" + (_.slugify(excludedDep))] = this.grabDependencyVarOrRequireIt(excludedDep, [], 'node-only');
        }
        return _dependencyFiles;
      }
    }
  });

  AlmondOptimizationTemplate.prototype.grabDependencyVarOrRequireIt = function(dep, vars, descr) {
    var depFactory;
    depFactory = this.deb(50, "define factory (mock) for `" + descr + "` '" + dep + "' called.") + "if (__isNode) {" + this.deb(50, "loading '" + dep + "' with node's `require('" + dep + "')`") + ("\n  return __nodeRequire('" + dep + "');\n} else {\n") + this.deb(50, "loading '" + dep + "' through 1st non-undefined binded var among `" + (vars.join(', ')) + "`, that should be available on closure or global (eg window)") + (_.isEmpty(vars) ? "  throw new Error(\"uRequire: trying to access unbound / excluded \'" + descr + "\' dependency \'" + dep + "\') on browser\");" : "  return " + (varSelector(vars, "__nodeRequire('" + dep + "')"))) + "\n}";
    return "define(" + this.__function(depFactory) + ");";
  };

  return AlmondOptimizationTemplate;

})(Template);
