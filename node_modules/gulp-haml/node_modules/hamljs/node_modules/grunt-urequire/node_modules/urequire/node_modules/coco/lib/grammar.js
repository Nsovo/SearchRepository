var ditto, last, o, bnf, operators, tokens, name, alts, alt, token;
ditto = {};
last = '';
o = function(patterns, action, options){
  patterns = patterns.trim().split(/\s+/);
  action && (action = action === ditto
    ? last
    : (action + "").replace(/^function\s*\(\)\s*\{\s*([\s\S]*\S)\s*\}/, '$1').replace(/\breturn\b/, '$$$$ =').replace(/\b(?!Er)[A-Z][\w.]*/g, 'yy.$&').replace(/\.L\(/g, '$&yylineno, '));
  return [patterns, last = action || '', options];
};
bnf = {
  Head: [
    o('ID', function(){
      return L(Var($1));
    }), o('STRNUM', function(){
      return L(Literal($1));
    }), o('LITERAL', ditto), o('Parenthetical'), o('List'), o('PARAM( ArgList OptComma )PARAM -> Block', function(){
      return L(Fun($2, $6, $5 === '~>'));
    }), o('FUNCTION CALL( ArgList OptComma )CALL Block', function(){
      return L(Fun($3, $6).named($1));
    }), o('IF Expression Block Else', function(){
      return If($2, $3, $1 === 'unless').addElse($4);
    }), o('IF INDENT IfLines DEDENT', function(){
      return $3.maybeUnlessBlock($1 === 'unless');
    }), o('LoopHead Block Else', function(){
      return $1.addBody($2).addElse($3);
    }), o('SWITCH Expression Cases', function(){
      return new Switch($2, $3);
    }), o('SWITCH Expression Cases DEFAULT Block', function(){
      return new Switch($2, $3, $5);
    }), o('SWITCH            Cases', function(){
      return new Switch(null, $2);
    }), o('SWITCH            Cases DEFAULT Block', function(){
      return new Switch(null, $2, $4);
    }), o('SWITCH                          Block', function(){
      return new Switch(null, [], $2);
    }), o('TRY Block', function(){
      return new Try($2);
    }), o('TRY Block CATCH Block', function(){
      return new Try($2, $3, $4);
    }), o('TRY Block CATCH Block FINALLY Block', function(){
      return new Try($2, $3, $4, $6);
    }), o('TRY Block             FINALLY Block', function(){
      return new Try($2, null, null, $4);
    }), o('CLASS Chain OptExtends OptImplements Block', function(){
      return new Class($2.unwrap(), $3, $4, $5);
    }), o('CLASS       OptExtends OptImplements Block', function(){
      return new Class(null, $2, $3, $4);
    }), o('LET CALL( ArgList OptComma )CALL Block', function(){
      return Call['let']($3, $6);
    }), o('WITH Expression Block', function(){
      return Pipe($2, $3, 'with');
    }), o('FOR  Expression Block', function(){
      return new For({
        kind: $1,
        source: $2,
        ref: true
      }).addBody($3);
    })
  ],
  Chain: [
    o('Head', function(){
      return Chain($1);
    }), o('Chain DOT Key', function(){
      return $1.add(Index($3, $2, true));
    }), o('Chain DOT List', ditto), o('Chain CALL( ArgList OptComma )CALL', function(){
      return $1.add(Call($3));
    }), o('Chain ?', function(){
      return Chain(Existence($1.unwrap()));
    })
  ],
  List: [
    o('[ ArgList    OptComma ]', function(){
      return L(Arr($2));
    }), o('{ Properties OptComma }', function(){
      return L(Obj($2));
    }), o('[ ArgList    OptComma ] LABEL', function(){
      return L(Arr($2)).named($5);
    }), o('{ Properties OptComma } LABEL', function(){
      return L(Obj($2)).named($5);
    })
  ],
  Key: [o('KeyBase'), o('Parenthetical')],
  KeyBase: [
    o('ID', function(){
      return L(Key($1));
    }), o('STRNUM', function(){
      return L(Literal($1));
    })
  ],
  ArgList: [
    o('', function(){
      return [];
    }), o('Arg', function(){
      return [$1];
    }), o('ArgList , Arg', function(){
      $1.push($3);
      return $1;
    }), o('ArgList OptComma NEWLINE Arg', function(){
      $1.push($4);
      return $1;
    }), o('ArgList OptComma INDENT ArgList OptComma DEDENT', function(){
      return $1.concat($4);
    })
  ],
  Arg: [
    o('Expression'), o('... Expression', function(){
      return Splat($2);
    }), o('...', function(){
      return Splat(L(Arr()), true);
    })
  ],
  OptComma: [o(''), o(',')],
  Lines: [
    o('', function(){
      return L(Block());
    }), o('Line', function(){
      return Block($1);
    }), o('Lines NEWLINE Line', function(){
      return $1.add($3);
    }), o('Lines NEWLINE')
  ],
  Line: [
    o('Expression'), o('Expression Block', function(){
      return Pipe($1, $2, 'cascade');
    }), o('PARAM( ArgList OptComma )PARAM <- Expression', function(){
      return Call.back($2, $6, $5 === '<~');
    }), o('COMMENT', function(){
      return L(JS($1, true, true));
    }), o('...', function(){
      return L(Throw(JS("Error('unimplemented')")));
    })
  ],
  Block: [o('INDENT Lines DEDENT', function(){
    return $2;
  })],
  Expression: [
    o('Chain', function(){
      return $1.unwrap();
    }), o('Chain ASSIGN Expression', function(){
      return Assign($1.unwrap(), $3, $2);
    }), o('Chain ASSIGN INDENT ArgList OptComma DEDENT', function(){
      return Assign($1.unwrap(), Arr.maybe($4), $2);
    }), o('Expression IMPORT Expression', function(){
      return Import($1, $3, $2 === '<<<<');
    }), o('Expression IMPORT INDENT ArgList OptComma DEDENT', function(){
      return Import($1, Arr.maybe($4), $2 === '<<<<');
    }), o('CREMENT Chain', function(){
      return Unary($1, $2.unwrap());
    }), o('Chain CREMENT', function(){
      return Unary($2, $1.unwrap(), true);
    }), o('UNARY ASSIGN Chain', function(){
      return Assign($3.unwrap(), [$1], $2);
    }), o('+-    ASSIGN Chain', ditto), o('^     ASSIGN Chain', ditto), o('UNARY Expression', function(){
      return Unary($1, $2);
    }), o('+-    Expression', ditto, {
      prec: 'UNARY'
    }), o('^     Expression', ditto, {
     