"use strict";
var $__Object = Object,
    $__getOwnPropertyNames = $__Object.getOwnPropertyNames,
    $__getOwnPropertyDescriptor = $__Object.getOwnPropertyDescriptor,
    $__getDescriptors = function(object) {
      var descriptors = {},
          name,
          names = $__getOwnPropertyNames(object);
      for (var i = 0; i < names.length; i++) {
        var name = names[i];
        descriptors[name] = $__getOwnPropertyDescriptor(object, name);
      }
      return descriptors;
    },
    $__createClassNoExtends = function(object, staticObject) {
      var ctor = object.constructor;
      Object.defineProperty(object, 'constructor', {enumerable: false});
      ctor.prototype = object;
      Object.defineProperties(ctor, $__getDescriptors(staticObject));
      return ctor;
    };
var _ = require("underscore");
var fs = require("fs");
var Path = require("path");
var Compiler = require("es6-module-transpiler").Compiler;
var LocalsCompiler = require("./locals-compiler")["default"];
var Packager = function() {
  'use strict';
  var $Packager = ($__createClassNoExtends)({
    constructor: function(file) {
      var options = arguments[1] !== (void 0) ? arguments[1]: {};
      this.file = Path.resolve(file);
      this.loadedModules = {};
      this.fileList = [];
      this.options = options;
      this.options.imports = {};
      this.unique = 0;
      this.collectDependencies();
    },
    collectDependencies: function() {
      var file = arguments[0] !== (void 0) ? arguments[0]: this.file;
      file = file.replace(/\.js$/, '') + '.js';
      this.loadedModules[file] = false;
      this.options.imports[file] = ("__module" + this.unique++ + "__");
      var source = fs.readFileSync(file);
      var compiler = new Compiler(source, file, this.options);
      compiler.imports.forEach(function(importStatement) {
        var name = importStatement.source.value;
        name = Path.resolve(Path.dirname(file), name);
        name = name.replace(/\.js$/, '') + '.js';
        if (this.loadedModules[name] === false) {
          throw new Error(("Circular dependency found \"" + importStatement.source.value + "\" in \"" + file + "\""));
        } else if (!this.loadedModules[name]) {
          this.collectDependencies(name);
          this.checkImports(name, importStatement);
        }
      }, this);
      this.loadedModules[file] = compiler;
      this.fileList.push(file);
      return this.fileList;
    },
    toLocals: function() {
      var modules = this.loadedModules,
          options = this.options,
          root = Path.dirname(this.file);
      var out = this.options['export'] ? ("/* exported " + this.options['export'] + " */\nvar " + this.options['export'] + " = "): '';
      out += '(function() {\n';
      out += this.fileList.map(function(file) {
        var compiler = modules[file];
        return ("// " + Path.relative(root, file) + "\n" + new LocalsCompiler(compiler, options).stringify());
      }).join('\n');
      if (this.options['export']) {
        out += '\n  return __module0__;';
      }
      out += '\n})();\n';
      return out;
    },
    checkImports: function(name, importStatement) {
      var imported = this.loadedModules[name],
          exports = imported.exports;
      if (importStatement.kind === 'default') {
        if (!_.any(exports, function(export_) {
          return export_['default'];
        })) {
          throw new Error(("No default export for \"" + name + "\""));
        }
      } else if (importStatement.kind === 'named') {
        _.each(importStatement.specifiers, function(specifier) {
          var specifierName = specifier.id.name;
          var exported = _.any(exports, function(export_) {
            if (export_.specifiers) {
              return _.any(export_.specifiers, function(exportSpecifier) {
                return exportSpecifier.id.name === specifierName;
              });
            } else if (export_.declaration) {
              if (export_.declaration.type === 'VariableDeclaration') {
                return export_.declaration.declarations[0].id.name === specifierName;
              } else if (export_.declaration.type === 'FunctionDeclaration') {
                return export_.declaration.id.name === specifierName;
              } else if (export_.declaration.type === 'Indentifier') {
                return export_.declaration.name === specifierName;
              }
            }
          });
          if (!exported) {
            throw new Error(("No export named \"" + specifierName + "\" in \"" + name + "\""));
          }
        });
      }
    }
  }, {});
  return $Packager;
}();
exports["default"] = Packager;

//@ sourceMappingURL=data:application/json;base64,